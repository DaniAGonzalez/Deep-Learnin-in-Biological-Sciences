# -*- coding: utf-8 -*-
"""Counting cells colonies - Deep Learning .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F-MhWKQkicM92QMHmNChmu21uTUFPpbY
"""

!pip install deepchem
!pip install tensorflow
!pip install keras

import deepchem as dc
import numpy as np
import os
import re

directory = './BBBC005_v1_images'
files = []
labels = []

# iteration over the folder and obtain labels
for f in os.listdir(directory):
    if f.endswith('.TIF'):
        files.append(os.path.join(directory, f))
        labels.append(int(re.findall('_C(.*?)_', f)[0]))     # _C13_

datasets = dc.data.ImageDataset(files, np.array(labels))

datasets = dc.data.ImageDataset(files, np.array(labels))

# Trainning and test data
splitter = dc.splits.RandomSplitter()
train_ds, valid_ds, test_ds = splitter.train_valid_test_split(datasets, seed=420)

train_ds.X.shape

test_ds.X.shape

train_ds.y.shape #variable i am modelling (number of colonies )

test_ds.y.shape

#Build the model
# keras CNN
from keras.model import Module
from keras.layers import Input, Conv1D, LeakyReLU, BatchNormalization, Flatten, Dense, Dropout

# Input layer
i_layer = Input(shape=(520, 696))
x = i_layer

x = Conv1D(filters=32, kernel_size=3, strides=1, padding= 'same')(x)
x = LeakyReLU()(x)
x = BatchNormalization(momentum=0.9)(x)

x = Conv1D(filters=32, kernel_size=3, strides=2, padding= 'same')(x)
x = LeakyReLU()(x)
x = BatchNormalization(momentum=0.9)(x)

x = Flatten()(x)
x = Dense(units=128)(x)
x= LeakyReLU()(x)
x= Dropout(0.25)(x)

#Output layer
o_layer = Dense(units=1)(x)

keras_model = Model(i_layer, o_layer)

keras_model.summary()

#Taking the keras model into a DC model
model = dc.models.KerasModel(keras_model, dc.models.losses.L2Loss(), batch_size=1000)

model.fit(train_ds, nb_epoch=50) #



prediction = model.predict(test_ds)
print(prediction[:5])

prediction = np.rint(prediction)
print(prediction[:5])

#Computing R2 error of prediction
rmse = np.sqrt(np.mean((prediction-test_ds.y)**2))
print(rmse)

import matplotlib.pyplot as plt
import seaborn as sns #plotting prediction and test dataset looks like

prediction = prediction.flatten()

fig, ax = plt.subplots(figsize=(3,3))
ax = sns.scatterplot(x=prediction, y=test_ds.y)
ax.set_xlabel('prediction')
ax.set_ylabel('actual')

plt.imshow(test_ds.X[4])

